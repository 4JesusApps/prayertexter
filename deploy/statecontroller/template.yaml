Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Tracing: Active
    Environment:
      Variables:
        # Env variables need to match specific format. See prayertexter config package for details.
        PRAY_CONF_AWS_DB_PRAYER_ACTIVETABLE: !ImportValue db-ActivePrayerTableName
        PRAY_CONF_AWS_DB_BLOCKEDPHONES_TABLE: !ImportValue db-GeneralTableName
        PRAY_CONF_AWS_DB_INTERCESSORPHONES_TABLE: !ImportValue db-GeneralTableName
        PRAY_CONF_AWS_DB_MEMBER_TABLE: !ImportValue db-MemberTableName
        PRAY_CONF_AWS_DB_PRAYER_QUEUETABLE: !ImportValue db-QueuedPrayerTableName
        PRAY_CONF_AWS_SMS_PHONEPOOL: !ImportValue prayertexter-SMSPhonePoolARN
        PRAY_CONF_INTERCESSORSPERPRAYER: 3

Resources:
  # Lambda function
  StateController:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
# Architecture lines are only needed when running sam local tests on ARM CPU (Mac with apple silicon)
#      Architectures:
#        - arm64
      Description: !Sub "Stack ${AWS::StackName} Function StateController"
      CodeUri: ../../cmd/StateController/
      Handler: bootstrap
      Runtime: provided.al2023
      ReservedConcurrentExecutions: 1
      Policies:
        # Grants lambda function access to dynamodb tables
        - DynamoDBCrudPolicy:
            TableName: !ImportValue db-ActivePrayerTableName
        - DynamoDBCrudPolicy:
            TableName: !ImportValue db-GeneralTableName
        - DynamoDBCrudPolicy:
            TableName: !ImportValue db-MemberTableName
        - DynamoDBCrudPolicy:
            TableName: !ImportValue db-QueuedPrayerTableName
        # Grants lambda function access to send SMS
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sms-voice:SendTextMessage
              Resource: !ImportValue prayertexter-SMSPhonePoolARN
      Tags:
        prayertexter: ""

  # Log group for lambda function
  StateControllerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${StateController}
      Tags:
        - Key: prayertexter
          Value: ""

  # IAM role for eventbridge scheduler to invoke statecontroller lambda
  SchedulerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: scheduler-invoke-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt StateController.Arn
      Tags:
        - Key: prayertexter
          Value: ""

  # Eventbridge scheduler rule
  StateControllerSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: statecontroller-scheduler
      ScheduleExpression: "cron(0 7-21 * * ? *)"
      ScheduleExpressionTimezone: "America/Los_Angeles"
      State: ENABLED
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt StateController.Arn
        RoleArn: !GetAtt SchedulerLambdaExecutionRole.Arn